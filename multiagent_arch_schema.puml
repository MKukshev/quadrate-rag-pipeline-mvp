@startuml
' ---------- Style ----------
skinparam componentStyle rectangle
skinparam shadowing false
skinparam wrapWidth 240
skinparam defaultFontName "Inter"
skinparam defaultTextAlignment left
title Multi-Agent Architecture with Routing (Variant 2)

' ---------- External ----------
package "Внешние интерфейсы" as EXT {
  component "Клиенты\n(Web/Mobile/CLI)\n• Web UI (React)\n• WebSocket стриминг" as Clients
  component "API Gateway + Auth\n• REST/WS вход\n• OIDC/Keycloak\n• gRPC proxy внутрь" as Gateway
  Clients -[#black]-> Gateway : REST / WS
}

' ---------- Orchestration ----------
package "Оркестрация и маршрутизация" as ORCH {
  component "Router / Orchestrator (Go)\n• Классификация запроса (Router)\n• Планирование: ReAct / Plan-&-Execute\n• Контекст беседы (checkpointer)\n• Распределение по агентам" as Router
  queue "Scheduler / Events\n• Temporal / APScheduler\n• Kafka / NATS" as Scheduler
  Scheduler ..> Router : triggers (async)
}
Gateway --> Router : REST / gRPC

' ---------- Agents ----------
package "Слой агентов" as AGENTS {
  component "RAG-Agent\n• Гибридный ретрив\n• Цитируемые источники" as RagAgent
  component "Planner/Executor-Agent\n• План → шаги\n• ReAct-петли\n• Вызов инструментов" as PlanAgent
  component "Summarizer/Report-Agent\n• Повестки/отчёты (SGR)\n• Слайды/таблицы" as SummAgent
  component "Ops / Guard-Agent\n• Валидации/политики" as OpsAgent
}
Router --> RagAgent : dispatch
Router --> PlanAgent : dispatch
Router --> SummAgent : dispatch
Router --> OpsAgent  : dispatch

' ---------- Tools & RAG ----------
package "Инструменты и RAG-сервисы" as TOOLS {
  component "Retrieval Service (RAG)\n• Qdrant (векторы)\n• OpenSearch BM25\n• Rerank (Cross-Encoder)\n• Фильтры по space" as Retrieval
  component "Tools Gateway\n• Email / Calendar\n• Task / Tracker\n• File export (PPTX/Docx)\n• HTTP/gRPC инструменты" as ToolsGW
  component "SGR / Formatter\n• Outlines / Guardrails / Instructor\n• JSON-схемы / CFG" as SGR
}
RagAgent  --> Retrieval : gRPC
PlanAgent --> ToolsGW   : gRPC / HTTP
SummAgent --> SGR       : gRPC

' ---------- Model Services ----------
package "Модельные сервисы (Python/GPU)" as MODELS {
  component "Embedding Service\nSentenceTransformers\n(bge-small / MiniLM)" as Embed
  component "ReRanker Service\nCross-Encoder\n(bge-reranker / ms-marco)" as Reranker
  component "LLM Service\nvLLM (или Ollama)\nOpenAI-совм., token streaming" as LLM
}
' Tool calls to LLM
PlanAgent --> LLM : tool calls / functions
SGR       --> LLM : format-guided prompt

' Retrieval → model services
Retrieval --> Embed   : embed(query/docs)
Retrieval --> Reranker: rerank

' ---------- Data / State / Observability ----------
package "Данные, состояние и наблюдаемость" as DATA {
  database "Qdrant" as Qdrant
  database "OpenSearch" as OpenSearch
  storage  "MinIO / S3 (артефакты)" as Minio
  database "Postgres\n(checkpointer / chat history)" as Postgres
  component "Redis\n(session / memory cache)" as Redis
  component "Observability\n• OpenTelemetry Collector\n• Prometheus / Grafana\n• Jaeger / Tempo\n• ELK / Loki\n• Langfuse" as Obs
}

' RAG backends
Retrieval --> Qdrant    : ANN (vectors)
Retrieval --> OpenSearch: BM25
Embed ..> Qdrant : write vectors (ingest)  ##[dashed]
' Экспорт артефактов
ToolsGW  --> Minio
SummAgent--> Minio

' Agent/Tools state
RagAgent  --> Postgres : read/write context
PlanAgent --> Postgres
SummAgent --> Postgres
OpsAgent  --> Postgres
RagAgent  --> Redis
PlanAgent --> Redis
SummAgent --> Redis

' Observability
Gateway  --> Obs
Router   --> Obs
RagAgent --> Obs
PlanAgent--> Obs
SummAgent--> Obs
Retrieval--> Obs
Embed    --> Obs
Reranker --> Obs
LLM      --> Obs

' Legend (protocols)
legend left
  == Протоколы ==
  1) REST / WS — внешний периметр
  2) gRPC — внутренняя шина сервисов
  3) dashed — фоновые/инжест-связи
endlegend

@enduml