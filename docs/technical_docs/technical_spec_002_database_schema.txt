ТЕХНИЧЕСКАЯ СПЕЦИФИКАЦИЯ
Схема базы данных банковской системы
Версия 3.2

АО "ТехноБанк"
Дата: 25.04.2024
Версия документа: 3.2

═══════════════════════════════════════════════════════════════════════════════

1. ОБЩИЕ СВЕДЕНИЯ

1.1 Назначение
Данный документ описывает схему базы данных банковской системы АО "ТехноБанк". Схема включает таблицы для хранения информации о клиентах, счетах, транзакциях, платежах и других банковских операциях.

1.2 Технологический стек
- СУБД: PostgreSQL 14+
- Язык: SQL
- Кодировка: UTF-8
- Локализация: ru_RU.UTF-8

1.3 Принципы проектирования
- Нормализация до 3NF
- Индексы для оптимизации запросов
- Ограничения целостности
- Аудит изменений
- Шифрование чувствительных данных

═══════════════════════════════════════════════════════════════════════════════

2. СТРУКТУРА БАЗЫ ДАННЫХ

2.1 Основные схемы
- public - основные таблицы
- audit - таблицы аудита
- temp - временные таблицы
- archive - архивные данные

2.2 Соглашения по именованию
- Таблицы: snake_case, множественное число
- Поля: snake_case, единственное число
- Индексы: idx_{table}_{field}
- Ограничения: {type}_{table}_{field}
- Последовательности: seq_{table}_{field}

═══════════════════════════════════════════════════════════════════════════════

3. ТАБЛИЦЫ КЛИЕНТОВ

3.1 Таблица clients
```sql
CREATE TABLE clients (
    id BIGSERIAL PRIMARY KEY,
    client_type VARCHAR(20) NOT NULL CHECK (client_type IN ('individual', 'corporate')),
    status VARCHAR(20) NOT NULL DEFAULT 'active' CHECK (status IN ('active', 'blocked', 'closed')),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    created_by BIGINT NOT NULL,
    updated_by BIGINT NOT NULL
);

CREATE INDEX idx_clients_status ON clients(status);
CREATE INDEX idx_clients_type ON clients(client_type);
CREATE INDEX idx_clients_created_at ON clients(created_at);
```

3.2 Таблица individual_clients
```sql
CREATE TABLE individual_clients (
    id BIGSERIAL PRIMARY KEY,
    client_id BIGINT NOT NULL REFERENCES clients(id) ON DELETE CASCADE,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    middle_name VARCHAR(100),
    birth_date DATE NOT NULL,
    gender VARCHAR(10) CHECK (gender IN ('male', 'female')),
    passport_series VARCHAR(10),
    passport_number VARCHAR(20),
    passport_issued_by TEXT,
    passport_issued_date DATE,
    snils VARCHAR(14),
    inn VARCHAR(12),
    phone VARCHAR(20),
    email VARCHAR(255),
    address TEXT,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_individual_clients_client_id ON individual_clients(client_id);
CREATE INDEX idx_individual_clients_passport ON individual_clients(passport_series, passport_number);
CREATE INDEX idx_individual_clients_snils ON individual_clients(snils);
CREATE INDEX idx_individual_clients_inn ON individual_clients(inn);
CREATE INDEX idx_individual_clients_phone ON individual_clients(phone);
CREATE INDEX idx_individual_clients_email ON individual_clients(email);
```

3.3 Таблица corporate_clients
```sql
CREATE TABLE corporate_clients (
    id BIGSERIAL PRIMARY KEY,
    client_id BIGINT NOT NULL REFERENCES clients(id) ON DELETE CASCADE,
    legal_name VARCHAR(500) NOT NULL,
    short_name VARCHAR(200),
    inn VARCHAR(12) NOT NULL,
    kpp VARCHAR(9),
    ogrn VARCHAR(15),
    legal_address TEXT NOT NULL,
    actual_address TEXT,
    phone VARCHAR(20),
    email VARCHAR(255),
    website VARCHAR(255),
    ceo_name VARCHAR(200),
    ceo_position VARCHAR(100),
    authorized_person_name VARCHAR(200),
    authorized_person_position VARCHAR(100),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_corporate_clients_client_id ON corporate_clients(client_id);
CREATE INDEX idx_corporate_clients_inn ON corporate_clients(inn);
CREATE INDEX idx_corporate_clients_ogrn ON corporate_clients(ogrn);
CREATE INDEX idx_corporate_clients_legal_name ON corporate_clients(legal_name);
```

═══════════════════════════════════════════════════════════════════════════════

4. ТАБЛИЦЫ СЧЕТОВ

4.1 Таблица accounts
```sql
CREATE TABLE accounts (
    id BIGSERIAL PRIMARY KEY,
    client_id BIGINT NOT NULL REFERENCES clients(id) ON DELETE CASCADE,
    account_number VARCHAR(20) NOT NULL UNIQUE,
    account_type VARCHAR(20) NOT NULL CHECK (account_type IN ('checking', 'savings', 'credit', 'deposit')),
    currency VARCHAR(3) NOT NULL DEFAULT 'RUB',
    status VARCHAR(20) NOT NULL DEFAULT 'active' CHECK (status IN ('active', 'blocked', 'closed')),
    balance DECIMAL(15,2) NOT NULL DEFAULT 0.00,
    credit_limit DECIMAL(15,2) DEFAULT 0.00,
    interest_rate DECIMAL(5,4) DEFAULT 0.0000,
    opened_date DATE NOT NULL DEFAULT CURRENT_DATE,
    closed_date DATE,
    iban VARCHAR(34),
    bic VARCHAR(9),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_accounts_client_id ON accounts(client_id);
CREATE INDEX idx_accounts_number ON accounts(account_number);
CREATE INDEX idx_accounts_type ON accounts(account_type);
CREATE INDEX idx_accounts_status ON accounts(status);
CREATE INDEX idx_accounts_currency ON accounts(currency);
CREATE INDEX idx_accounts_balance ON accounts(balance);
```

4.2 Таблица account_balances
```sql
CREATE TABLE account_balances (
    id BIGSERIAL PRIMARY KEY,
    account_id BIGINT NOT NULL REFERENCES accounts(id) ON DELETE CASCADE,
    balance_date DATE NOT NULL,
    opening_balance DECIMAL(15,2) NOT NULL,
    closing_balance DECIMAL(15,2) NOT NULL,
    total_debits DECIMAL(15,2) NOT NULL DEFAULT 0.00,
    total_credits DECIMAL(15,2) NOT NULL DEFAULT 0.00,
    transaction_count INTEGER NOT NULL DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_account_balances_account_id ON account_balances(account_id);
CREATE INDEX idx_account_balances_date ON account_balances(balance_date);
CREATE UNIQUE INDEX idx_account_balances_account_date ON account_balances(account_id, balance_date);
```

═══════════════════════════════════════════════════════════════════════════════

5. ТАБЛИЦЫ ТРАНЗАКЦИЙ

5.1 Таблица transactions
```sql
CREATE TABLE transactions (
    id BIGSERIAL PRIMARY KEY,
    transaction_id VARCHAR(50) NOT NULL UNIQUE,
    account_id BIGINT NOT NULL REFERENCES accounts(id) ON DELETE CASCADE,
    transaction_type VARCHAR(20) NOT NULL CHECK (transaction_type IN ('debit', 'credit', 'transfer')),
    amount DECIMAL(15,2) NOT NULL,
    currency VARCHAR(3) NOT NULL DEFAULT 'RUB',
    description TEXT,
    reference_number VARCHAR(50),
    status VARCHAR(20) NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'completed', 'failed', 'cancelled')),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    executed_at TIMESTAMP WITH TIME ZONE,
    created_by BIGINT NOT NULL,
    executed_by BIGINT
);

CREATE INDEX idx_transactions_account_id ON transactions(account_id);
CREATE INDEX idx_transactions_type ON transactions(transaction_type);
CREATE INDEX idx_transactions_status ON transactions(status);
CREATE INDEX idx_transactions_created_at ON transactions(created_at);
CREATE INDEX idx_transactions_executed_at ON transactions(executed_at);
CREATE INDEX idx_transactions_reference ON transactions(reference_number);
```

5.2 Таблица transaction_details
```sql
CREATE TABLE transaction_details (
    id BIGSERIAL PRIMARY KEY,
    transaction_id BIGINT NOT NULL REFERENCES transactions(id) ON DELETE CASCADE,
    counterparty_name VARCHAR(500),
    counterparty_account VARCHAR(20),
    counterparty_bic VARCHAR(9),
    counterparty_bank VARCHAR(200),
    purpose TEXT,
    tax_code VARCHAR(10),
    tax_amount DECIMAL(15,2),
    fee_amount DECIMAL(15,2),
    exchange_rate DECIMAL(10,6),
    original_amount DECIMAL(15,2),
    original_currency VARCHAR(3),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_transaction_details_transaction_id ON transaction_details(transaction_id);
CREATE INDEX idx_transaction_details_counterparty ON transaction_details(counterparty_account);
```

5.3 Таблица transfers
```sql
CREATE TABLE transfers (
    id BIGSERIAL PRIMARY KEY,
    transfer_id VARCHAR(50) NOT NULL UNIQUE,
    from_account_id BIGINT NOT NULL REFERENCES accounts(id) ON DELETE CASCADE,
    to_account_id BIGINT REFERENCES accounts(id) ON DELETE SET NULL,
    to_external_account VARCHAR(20),
    to_external_bic VARCHAR(9),
    amount DECIMAL(15,2) NOT NULL,
    currency VARCHAR(3) NOT NULL DEFAULT 'RUB',
    purpose TEXT,
    status VARCHAR(20) NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'completed', 'failed', 'cancelled')),
    priority VARCHAR(10) DEFAULT 'normal' CHECK (priority IN ('urgent', 'normal', 'low')),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    executed_at TIMESTAMP WITH TIME ZONE,
    created_by BIGINT NOT NULL,
    executed_by BIGINT
);

CREATE INDEX idx_transfers_from_account ON transfers(from_account_id);
CREATE INDEX idx_transfers_to_account ON transfers(to_account_id);
CREATE INDEX idx_transfers_status ON transfers(status);
CREATE INDEX idx_transfers_created_at ON transfers(created_at);
CREATE INDEX idx_transfers_executed_at ON transfers(executed_at);
```

═══════════════════════════════════════════════════════════════════════════════

6. ТАБЛИЦЫ ПЛАТЕЖЕЙ

6.1 Таблица payments
```sql
CREATE TABLE payments (
    id BIGSERIAL PRIMARY KEY,
    payment_id VARCHAR(50) NOT NULL UNIQUE,
    account_id BIGINT NOT NULL REFERENCES accounts(id) ON DELETE CASCADE,
    payment_type VARCHAR(20) NOT NULL CHECK (payment_type IN ('transfer', 'card_payment', 'cash', 'check')),
    amount DECIMAL(15,2) NOT NULL,
    currency VARCHAR(3) NOT NULL DEFAULT 'RUB',
    recipient_name VARCHAR(500) NOT NULL,
    recipient_account VARCHAR(20),
    recipient_bic VARCHAR(9),
    recipient_bank VARCHAR(200),
    purpose TEXT,
    status VARCHAR(20) NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'processing', 'completed', 'failed', 'cancelled')),
    priority VARCHAR(10) DEFAULT 'normal' CHECK (priority IN ('urgent', 'normal', 'low')),
    fee_amount DECIMAL(15,2) DEFAULT 0.00,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    executed_at TIMESTAMP WITH TIME ZONE,
    created_by BIGINT NOT NULL,
    executed_by BIGINT
);

CREATE INDEX idx_payments_account_id ON payments(account_id);
CREATE INDEX idx_payments_type ON payments(payment_type);
CREATE INDEX idx_payments_status ON payments(status);
CREATE INDEX idx_payments_created_at ON payments(created_at);
CREATE INDEX idx_payments_executed_at ON payments(executed_at);
CREATE INDEX idx_payments_recipient ON payments(recipient_account);
```

6.2 Таблица payment_schedules
```sql
CREATE TABLE payment_schedules (
    id BIGSERIAL PRIMARY KEY,
    payment_id BIGINT NOT NULL REFERENCES payments(id) ON DELETE CASCADE,
    schedule_type VARCHAR(20) NOT NULL CHECK (schedule_type IN ('one_time', 'recurring', 'template')),
    frequency VARCHAR(20) CHECK (frequency IN ('daily', 'weekly', 'monthly', 'quarterly', 'yearly')),
    start_date DATE NOT NULL,
    end_date DATE,
    next_execution_date DATE,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_payment_schedules_payment_id ON payment_schedules(payment_id);
CREATE INDEX idx_payment_schedules_next_execution ON payment_schedules(next_execution_date);
CREATE INDEX idx_payment_schedules_active ON payment_schedules(is_active);
```

═══════════════════════════════════════════════════════════════════════════════

7. ТАБЛИЦЫ КАРТ

7.1 Таблица cards
```sql
CREATE TABLE cards (
    id BIGSERIAL PRIMARY KEY,
    card_number VARCHAR(19) NOT NULL UNIQUE,
    account_id BIGINT NOT NULL REFERENCES accounts(id) ON DELETE CASCADE,
    card_type VARCHAR(20) NOT NULL CHECK (card_type IN ('debit', 'credit', 'prepaid')),
    card_brand VARCHAR(20) NOT NULL CHECK (card_brand IN ('visa', 'mastercard', 'mir')),
    status VARCHAR(20) NOT NULL DEFAULT 'active' CHECK (status IN ('active', 'blocked', 'expired', 'cancelled')),
    holder_name VARCHAR(100) NOT NULL,
    expiry_date DATE NOT NULL,
    cvv VARCHAR(3) NOT NULL,
    pin_hash VARCHAR(255) NOT NULL,
    daily_limit DECIMAL(15,2) DEFAULT 100000.00,
    monthly_limit DECIMAL(15,2) DEFAULT 1000000.00,
    issued_date DATE NOT NULL DEFAULT CURRENT_DATE,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_cards_account_id ON cards(account_id);
CREATE INDEX idx_cards_number ON cards(card_number);
CREATE INDEX idx_cards_type ON cards(card_type);
CREATE INDEX idx_cards_status ON cards(status);
CREATE INDEX idx_cards_expiry ON cards(expiry_date);
```

7.2 Таблица card_transactions
```sql
CREATE TABLE card_transactions (
    id BIGSERIAL PRIMARY KEY,
    transaction_id VARCHAR(50) NOT NULL UNIQUE,
    card_id BIGINT NOT NULL REFERENCES cards(id) ON DELETE CASCADE,
    merchant_name VARCHAR(200),
    merchant_category VARCHAR(10),
    amount DECIMAL(15,2) NOT NULL,
    currency VARCHAR(3) NOT NULL DEFAULT 'RUB',
    transaction_date TIMESTAMP WITH TIME ZONE NOT NULL,
    authorization_code VARCHAR(20),
    status VARCHAR(20) NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'authorized', 'completed', 'declined')),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_card_transactions_card_id ON card_transactions(card_id);
CREATE INDEX idx_card_transactions_date ON card_transactions(transaction_date);
CREATE INDEX idx_card_transactions_status ON card_transactions(status);
CREATE INDEX idx_card_transactions_merchant ON card_transactions(merchant_name);
```

═══════════════════════════════════════════════════════════════════════════════

8. ТАБЛИЦЫ АУДИТА

8.1 Таблица audit_logs
```sql
CREATE TABLE audit_logs (
    id BIGSERIAL PRIMARY KEY,
    table_name VARCHAR(100) NOT NULL,
    record_id BIGINT NOT NULL,
    operation VARCHAR(10) NOT NULL CHECK (operation IN ('INSERT', 'UPDATE', 'DELETE')),
    old_values JSONB,
    new_values JSONB,
    changed_by BIGINT NOT NULL,
    changed_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    ip_address INET,
    user_agent TEXT
);

CREATE INDEX idx_audit_logs_table_record ON audit_logs(table_name, record_id);
CREATE INDEX idx_audit_logs_changed_by ON audit_logs(changed_by);
CREATE INDEX idx_audit_logs_changed_at ON audit_logs(changed_at);
CREATE INDEX idx_audit_logs_operation ON audit_logs(operation);
```

8.2 Таблица user_sessions
```sql
CREATE TABLE user_sessions (
    id BIGSERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL,
    session_token VARCHAR(255) NOT NULL UNIQUE,
    ip_address INET,
    user_agent TEXT,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    last_activity TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    is_active BOOLEAN NOT NULL DEFAULT TRUE
);

CREATE INDEX idx_user_sessions_user_id ON user_sessions(user_id);
CREATE INDEX idx_user_sessions_token ON user_sessions(session_token);
CREATE INDEX idx_user_sessions_expires ON user_sessions(expires_at);
CREATE INDEX idx_user_sessions_active ON user_sessions(is_active);
```

═══════════════════════════════════════════════════════════════════════════════

9. ТАБЛИЦЫ СИСТЕМНЫЕ

9.1 Таблица users
```sql
CREATE TABLE users (
    id BIGSERIAL PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(255) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    role VARCHAR(20) NOT NULL CHECK (role IN ('admin', 'operator', 'manager', 'auditor')),
    status VARCHAR(20) NOT NULL DEFAULT 'active' CHECK (status IN ('active', 'blocked', 'inactive')),
    last_login TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_users_username ON users(username);
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_role ON users(role);
CREATE INDEX idx_users_status ON users(status);
```

9.2 Таблица system_settings
```sql
CREATE TABLE system_settings (
    id BIGSERIAL PRIMARY KEY,
    setting_key VARCHAR(100) NOT NULL UNIQUE,
    setting_value TEXT NOT NULL,
    setting_type VARCHAR(20) NOT NULL DEFAULT 'string' CHECK (setting_type IN ('string', 'number', 'boolean', 'json')),
    description TEXT,
    is_encrypted BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_system_settings_key ON system_settings(setting_key);
CREATE INDEX idx_system_settings_type ON system_settings(setting_type);
```

═══════════════════════════════════════════════════════════════════════════════

10. ТРИГГЕРЫ И ФУНКЦИИ

10.1 Функция обновления updated_at
```sql
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';
```

10.2 Триггер для автоматического обновления updated_at
```sql
CREATE TRIGGER update_clients_updated_at BEFORE UPDATE ON clients
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_accounts_updated_at BEFORE UPDATE ON accounts
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_cards_updated_at BEFORE UPDATE ON cards
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
```

10.3 Функция аудита
```sql
CREATE OR REPLACE FUNCTION audit_trigger_function()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'DELETE' THEN
        INSERT INTO audit_logs (table_name, record_id, operation, old_values, changed_by)
        VALUES (TG_TABLE_NAME, OLD.id, TG_OP, row_to_json(OLD), current_setting('app.current_user_id')::bigint);
        RETURN OLD;
    ELSIF TG_OP = 'UPDATE' THEN
        INSERT INTO audit_logs (table_name, record_id, operation, old_values, new_values, changed_by)
        VALUES (TG_TABLE_NAME, NEW.id, TG_OP, row_to_json(OLD), row_to_json(NEW), current_setting('app.current_user_id')::bigint);
        RETURN NEW;
    ELSIF TG_OP = 'INSERT' THEN
        INSERT INTO audit_logs (table_name, record_id, operation, new_values, changed_by)
        VALUES (TG_TABLE_NAME, NEW.id, TG_OP, row_to_json(NEW), current_setting('app.current_user_id')::bigint);
        RETURN NEW;
    END IF;
    RETURN NULL;
END;
$$ language 'plpgsql';
```

10.4 Триггеры аудита
```sql
CREATE TRIGGER audit_clients_trigger AFTER INSERT OR UPDATE OR DELETE ON clients
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER audit_accounts_trigger AFTER INSERT OR UPDATE OR DELETE ON accounts
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER audit_transactions_trigger AFTER INSERT OR UPDATE OR DELETE ON transactions
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();
```

═══════════════════════════════════════════════════════════════════════════════

11. ОГРАНИЧЕНИЯ И ПРАВИЛА

11.1 Ограничения целостности
```sql
-- Проверка баланса счета
ALTER TABLE accounts ADD CONSTRAINT check_balance_positive 
    CHECK (balance >= 0 OR account_type = 'credit');

-- Проверка лимитов карты
ALTER TABLE cards ADD CONSTRAINT check_daily_limit_positive 
    CHECK (daily_limit > 0);

-- Проверка дат
ALTER TABLE cards ADD CONSTRAINT check_expiry_date_future 
    CHECK (expiry_date > CURRENT_DATE);

-- Проверка статусов
ALTER TABLE transactions ADD CONSTRAINT check_executed_at_when_completed 
    CHECK (status != 'completed' OR executed_at IS NOT NULL);
```

11.2 Правила безопасности
```sql
-- Шифрование чувствительных данных
CREATE EXTENSION IF NOT EXISTS pgcrypto;

-- Функция шифрования
CREATE OR REPLACE FUNCTION encrypt_sensitive_data(data TEXT)
RETURNS TEXT AS $$
BEGIN
    RETURN encode(pgp_sym_encrypt(data, current_setting('app.encryption_key')), 'base64');
END;
$$ LANGUAGE plpgsql;

-- Функция расшифровки
CREATE OR REPLACE FUNCTION decrypt_sensitive_data(encrypted_data TEXT)
RETURNS TEXT AS $$
BEGIN
    RETURN pgp_sym_decrypt(decode(encrypted_data, 'base64'), current_setting('app.encryption_key'));
END;
$$ LANGUAGE plpgsql;
```

═══════════════════════════════════════════════════════════════════════════════

12. ПРОИЗВОДИТЕЛЬНОСТЬ И ОПТИМИЗАЦИЯ

12.1 Партиционирование
```sql
-- Партиционирование таблицы транзакций по дате
CREATE TABLE transactions_partitioned (
    LIKE transactions INCLUDING ALL
) PARTITION BY RANGE (created_at);

-- Создание партиций по месяцам
CREATE TABLE transactions_2024_01 PARTITION OF transactions_partitioned
    FOR VALUES FROM ('2024-01-01') TO ('2024-02-01');

CREATE TABLE transactions_2024_02 PARTITION OF transactions_partitioned
    FOR VALUES FROM ('2024-02-01') TO ('2024-03-01');
```

12.2 Материализованные представления
```sql
-- Сводка по счетам
CREATE MATERIALIZED VIEW account_summary AS
SELECT 
    a.id,
    a.account_number,
    a.balance,
    a.currency,
    COUNT(t.id) as transaction_count,
    SUM(CASE WHEN t.transaction_type = 'credit' THEN t.amount ELSE 0 END) as total_credits,
    SUM(CASE WHEN t.transaction_type = 'debit' THEN t.amount ELSE 0 END) as total_debits
FROM accounts a
LEFT JOIN transactions t ON a.id = t.account_id
WHERE t.created_at >= CURRENT_DATE - INTERVAL '30 days'
GROUP BY a.id, a.account_number, a.balance, a.currency;

CREATE UNIQUE INDEX idx_account_summary_id ON account_summary(id);
```

12.3 Статистика и мониторинг
```sql
-- Включение автоматической статистики
ALTER TABLE accounts SET (autovacuum_analyze_scale_factor = 0.1);
ALTER TABLE transactions SET (autovacuum_analyze_scale_factor = 0.1);

-- Создание индексов для часто используемых запросов
CREATE INDEX CONCURRENTLY idx_transactions_account_date ON transactions(account_id, created_at);
CREATE INDEX CONCURRENTLY idx_payments_status_created ON payments(status, created_at);
```

═══════════════════════════════════════════════════════════════════════════════

13. РЕЗЕРВНОЕ КОПИРОВАНИЕ И ВОССТАНОВЛЕНИЕ

13.1 Настройка WAL
```sql
-- Включение WAL-архивирования
ALTER SYSTEM SET wal_level = replica;
ALTER SYSTEM SET archive_mode = on;
ALTER SYSTEM SET archive_command = 'cp %p /backup/wal_archive/%f';
ALTER SYSTEM SET max_wal_senders = 3;
ALTER SYSTEM SET hot_standby = on;
```

13.2 Схема резервного копирования
```sql
-- Ежедневное полное резервное копирование
-- pg_dump -h localhost -U postgres -d technobank -f /backup/daily/technobank_$(date +%Y%m%d).sql

-- Еженедельное резервное копирование с сжатием
-- pg_dump -h localhost -U postgres -d technobank -Fc -f /backup/weekly/technobank_$(date +%Y%m%d).backup

-- Ежемесячное резервное копирование
-- pg_dumpall -h localhost -U postgres -f /backup/monthly/full_backup_$(date +%Y%m%d).sql
```

═══════════════════════════════════════════════════════════════════════════════

14. МОНИТОРИНГ И ЛОГИРОВАНИЕ

14.1 Настройка логирования
```sql
-- Включение детального логирования
ALTER SYSTEM SET log_statement = 'all';
ALTER SYSTEM SET log_min_duration_statement = 1000;
ALTER SYSTEM SET log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h ';
ALTER SYSTEM SET log_checkpoints = on;
ALTER SYSTEM SET log_connections = on;
ALTER SYSTEM SET log_disconnections = on;
```

14.2 Мониторинг производительности
```sql
-- Создание представления для мониторинга
CREATE VIEW performance_stats AS
SELECT 
    schemaname,
    tablename,
    attname,
    n_distinct,
    correlation
FROM pg_stats
WHERE schemaname = 'public'
ORDER BY tablename, attname;
```

═══════════════════════════════════════════════════════════════════════════════

15. ИЗМЕНЕНИЯ В ВЕРСИЯХ

15.1 Версия 3.2 (текущая)
- Добавлена таблица payment_schedules
- Улучшена индексация
- Добавлены новые ограничения
- Оптимизированы запросы

15.2 Версия 3.1
- Добавлена поддержка карт
- Создана система аудита
- Улучшена безопасность

15.3 Версия 3.0
- Переход на PostgreSQL 14
- Новая структура таблиц
- Улучшенная производительность

═══════════════════════════════════════════════════════════════════════════════

16. ПОДДЕРЖКА И ДОКУМЕНТАЦИЯ

16.1 Контакты
- Архитектор БД: Козлов М.Д.
- Email: db-support@technobank.ru
- Телефон: +7 (495) 123-45-70

16.2 Документация
- Руководство администратора: /docs/database/admin
- Руководство разработчика: /docs/database/developer
- Схема ER-диаграммы: /docs/database/er-diagram

16.3 Обновления
- Плановые обновления: ежемесячно
- Критические обновления: по мере необходимости
- Уведомления: за 48 часов

═══════════════════════════════════════════════════════════════════════════════

Документ подготовлен:
Архитектор БД: Козлов М.Д.
Дата: 25.04.2024
Версия: 3.2
Статус: Утвержден
